https://leetcode.com/problems/combination-sum/


Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500

----------------------------------------------------------------------------------------------------------------------
class Solution {
    
    public void findCombi(int idx, int candidates[], int target, List<List<Integer>> res,  List<Integer> ds){
        if(idx==candidates.length){ // whole array is iterated
            if(target==0){   // combination found
                res.add(new ArrayList<>(ds));  // creating a new arraylist and copying all elements of ds to it and adding it to "res"
            }
            return;   // go to other recursion call
        }
        if(candidates[idx]<=target){  // if that particular element is <=target
            ds.add(candidates[idx]); 
            findCombi(idx, candidates, target-candidates[idx], res, ds); // Allowing the same element to occur again till its value<=target
            ds.remove(ds.size()-1);  // To explore "element not considered" condition
        }
        findCombi(idx+1, candidates, target, res, ds);  // If that element val is >target then explore next index element
            
        
        
    }
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        findCombi(0, candidates, target, res, new ArrayList<>());  // passing a new array list----> Therefore during findCombi function definition we took this argument as List<Integer>(List<Integer>=new ArrayList<>())
        return res;
    }
}
