// SUBSETS RECURSIVE
// TC: O(n*2^n)
// SC: O(n) we used
     : O(n*2^n) output if we ignore
     : O(n) recursion
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList();
    //Arrays.sort(nums);
    backtrack(list, new ArrayList(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list , List<Integer> curr, int [] nums, int idx){
    list.add(new ArrayList(curr));
    for(int i = idx; i < nums.length; i++){
        curr.add(nums[i]);
        backtrack(list, curr, nums, i + 1);
        curr.remove(curr.size() - 1);
    }
}
}
